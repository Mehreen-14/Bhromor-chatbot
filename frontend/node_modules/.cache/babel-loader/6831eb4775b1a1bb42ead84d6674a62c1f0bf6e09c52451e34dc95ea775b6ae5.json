{"ast":null,"code":"var _jsxFileName = \"D:\\\\Leetcode\\\\resume builder\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './css/App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const [previousChats, setPreviousChats] = useState([]); // Store previous chats\n  const [isDarkMode, setIsDarkMode] = useState(false); // Dark mode state\n\n  useEffect(() => {\n    // Load Google CSE script dynamically\n    const script = document.createElement(\"script\");\n    script.src = \"https://cse.google.com/cse.js?cx=a26bc224caf624533\"; // Your Google CSE ID here\n    script.async = true;\n    document.body.appendChild(script);\n\n    // Cleanup the script after the component unmounts\n    return () => {\n      document.body.removeChild(script);\n    };\n  }, []);\n  useEffect(() => {\n    // Toggle dark mode on body element\n    if (isDarkMode) {\n      document.body.classList.add(\"dark-mode\");\n    } else {\n      document.body.classList.remove(\"dark-mode\");\n    }\n  }, [isDarkMode]);\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n    const userMessage = {\n      text: input,\n      sender: \"user\"\n    };\n    setMessages(prev => [...prev, userMessage]);\n    const response = await fetch(\"http://localhost:5000/api/chat\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        message: input\n      })\n    });\n    const data = await response.json();\n    const botMessage = {\n      text: data.reply,\n      sender: \"bot\"\n    };\n\n    // If there are search results, include them in the bot's response\n    if (data.searchResults && data.searchResults.length > 0) {\n      const searchResultsMessage = data.searchResults.map((result, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: result.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 14\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: result.snippet\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          href: result.link,\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: \"Read more\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this));\n      botMessage.text = searchResultsMessage;\n    }\n    setMessages(prev => [...prev, botMessage]);\n    setInput(\"\");\n  };\n  const startNewChat = () => {\n    setMessages([]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-header\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Chatbot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 38\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-box\",\n        children: messages.map((msg, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${msg.sender}`,\n          children: typeof msg.text === 'string' ? msg.text : msg.text\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-area\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: input,\n          onChange: e => setInput(e.target.value),\n          placeholder: \"Type a message...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: sendMessage,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"LD08cF/Ey4SFyTmt8MliP9sT9qA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","App","_s","messages","setMessages","input","setInput","previousChats","setPreviousChats","isDarkMode","setIsDarkMode","script","document","createElement","src","async","body","appendChild","removeChild","classList","add","remove","sendMessage","trim","userMessage","text","sender","prev","response","fetch","method","headers","JSON","stringify","message","data","json","botMessage","reply","searchResults","length","searchResultsMessage","map","result","index","children","title","fileName","_jsxFileName","lineNumber","columnNumber","snippet","href","link","target","rel","startNewChat","className","msg","i","value","onChange","e","placeholder","onClick","_c","$RefreshReg$"],"sources":["D:/Leetcode/resume builder/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './css/App.css';\n\nfunction App() {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const [previousChats, setPreviousChats] = useState([]); // Store previous chats\n  const [isDarkMode, setIsDarkMode] = useState(false); // Dark mode state\n\n  useEffect(() => {\n    // Load Google CSE script dynamically\n    const script = document.createElement(\"script\");\n    script.src = \"https://cse.google.com/cse.js?cx=a26bc224caf624533\"; // Your Google CSE ID here\n    script.async = true;\n    document.body.appendChild(script);\n\n    // Cleanup the script after the component unmounts\n    return () => {\n      document.body.removeChild(script);\n    };\n  }, []);\n\n  useEffect(() => {\n    // Toggle dark mode on body element\n    if (isDarkMode) {\n      document.body.classList.add(\"dark-mode\");\n    } else {\n      document.body.classList.remove(\"dark-mode\");\n    }\n  }, [isDarkMode]);\n\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n\n    const userMessage = { text: input, sender: \"user\" };\n    setMessages(prev => [...prev, userMessage]);\n\n    const response = await fetch(\"http://localhost:5000/api/chat\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({ message: input })\n    });\n\n    const data = await response.json();\n    const botMessage = { text: data.reply, sender: \"bot\" };\n\n    // If there are search results, include them in the bot's response\n    if (data.searchResults && data.searchResults.length > 0) {\n      const searchResultsMessage = data.searchResults.map((result, index) => (\n        <div key={index}>\n          <p><strong>{result.title}</strong></p>\n          <p>{result.snippet}</p>\n          <a href={result.link} target=\"_blank\" rel=\"noopener noreferrer\">Read more</a>\n        </div>\n      ));\n      botMessage.text = searchResultsMessage;\n    }\n\n    setMessages(prev => [...prev, botMessage]);\n    setInput(\"\");\n  };\n\n  const startNewChat = () => {\n    setMessages([]);\n  };\n\n  return (\n    <div className=\"chat-container\">\n        \n        \n        {/* Main Chat Area */}\n      <div className=\"main-content\">\n        <div className=\"chat-header\"><h1>Chatbot</h1></div>\n  \n        <div className=\"chat-box\">\n          {messages.map((msg, i) => (\n            <div key={i} className={`message ${msg.sender}`}>\n              {typeof msg.text === 'string' ? msg.text : msg.text}\n            </div>\n          ))}\n        </div>\n  \n        <div className=\"input-area\">\n          <input\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n            placeholder=\"Type a message...\"\n          />\n          <button onClick={sendMessage}>Send</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}