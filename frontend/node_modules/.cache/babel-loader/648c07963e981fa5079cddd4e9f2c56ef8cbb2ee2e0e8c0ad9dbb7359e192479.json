{"ast":null,"code":"var _jsxFileName = \"D:\\\\Leetcode\\\\resume builder\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import './css/App.css';\n\n// function App() {\n//   const [messages, setMessages] = useState([]);\n//   const [input, setInput] = useState(\"\");\n\n//   const sendMessage = async () => {\n//     if (!input.trim()) return;\n\n//     const userMessage = { text: input, sender: \"user\" };\n//     setMessages(prev => [...prev, userMessage]);\n\n//     const response = await fetch(\"http://localhost:5000/api/chat\", {\n//       method: \"POST\",\n//       headers: {\n//         \"Content-Type\": \"application/json\"\n//       },\n//       body: JSON.stringify({ message: input })\n//     });\n\n//     const data = await response.json();\n//     const botMessage = { text: data.reply, sender: \"bot\" };\n//     setMessages(prev => [...prev, botMessage]);\n//     setInput(\"\");\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       <h2>Chatbot</h2>\n//       <div className=\"chat-box\">\n//         {messages.map((msg, i) => (\n//           <div key={i} className={`message ${msg.sender}`}>\n//             {msg.text}\n//           </div>\n//         ))}\n//       </div>\n//       <div className=\"input-area\">\n//         <input\n//           value={input}\n//           onChange={(e) => setInput(e.target.value)}\n//           placeholder=\"Type a message...\"\n//         />\n//         <button onClick={sendMessage}>Send</button>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport React, { useState, useEffect } from 'react';\nimport './css/App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n\n  // Load Google CSE script dynamically\n  useEffect(() => {\n    const script = document.createElement(\"script\");\n    script.src = \"https://cse.google.com/cse.js?cx=a26bc224caf624533\"; // Your Google CSE ID here\n    script.async = true;\n    document.body.appendChild(script);\n\n    // Cleanup the script after the component unmounts\n    return () => {\n      document.body.removeChild(script);\n    };\n  }, []);\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n    const userMessage = {\n      text: input,\n      sender: \"user\"\n    };\n    setMessages(prev => [...prev, userMessage]);\n    const response = await fetch(\"http://localhost:5000/api/chat\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        message: input\n      })\n    });\n    const data = await response.json();\n    const botMessage = {\n      text: data.reply,\n      sender: \"bot\"\n    };\n    setMessages(prev => [...prev, botMessage]);\n    setInput(\"\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Chatbot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: messages.map((msg, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.sender}`,\n        children: msg.text\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Type a message...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gcse-search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Z7bPrZHR9DDxNUXxHtFz54hQVxg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","App","_s","messages","setMessages","input","setInput","script","document","createElement","src","async","body","appendChild","removeChild","sendMessage","trim","userMessage","text","sender","prev","response","fetch","method","headers","JSON","stringify","message","data","json","botMessage","reply","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","i","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["D:/Leetcode/resume builder/frontend/src/App.js"],"sourcesContent":["// import React, { useState } from 'react';\n// import './css/App.css';\n\n// function App() {\n//   const [messages, setMessages] = useState([]);\n//   const [input, setInput] = useState(\"\");\n\n//   const sendMessage = async () => {\n//     if (!input.trim()) return;\n\n//     const userMessage = { text: input, sender: \"user\" };\n//     setMessages(prev => [...prev, userMessage]);\n\n//     const response = await fetch(\"http://localhost:5000/api/chat\", {\n//       method: \"POST\",\n//       headers: {\n//         \"Content-Type\": \"application/json\"\n//       },\n//       body: JSON.stringify({ message: input })\n//     });\n\n//     const data = await response.json();\n//     const botMessage = { text: data.reply, sender: \"bot\" };\n//     setMessages(prev => [...prev, botMessage]);\n//     setInput(\"\");\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       <h2>Chatbot</h2>\n//       <div className=\"chat-box\">\n//         {messages.map((msg, i) => (\n//           <div key={i} className={`message ${msg.sender}`}>\n//             {msg.text}\n//           </div>\n//         ))}\n//       </div>\n//       <div className=\"input-area\">\n//         <input\n//           value={input}\n//           onChange={(e) => setInput(e.target.value)}\n//           placeholder=\"Type a message...\"\n//         />\n//         <button onClick={sendMessage}>Send</button>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\nimport React, { useState, useEffect } from 'react';\nimport './css/App.css';\n\nfunction App() {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n\n  // Load Google CSE script dynamically\n  useEffect(() => {\n    const script = document.createElement(\"script\");\n    script.src = \"https://cse.google.com/cse.js?cx=a26bc224caf624533\"; // Your Google CSE ID here\n    script.async = true;\n    document.body.appendChild(script);\n\n    // Cleanup the script after the component unmounts\n    return () => {\n      document.body.removeChild(script);\n    };\n  }, []);\n\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n\n    const userMessage = { text: input, sender: \"user\" };\n    setMessages(prev => [...prev, userMessage]);\n\n    const response = await fetch(\"http://localhost:5000/api/chat\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({ message: input })\n    });\n\n    const data = await response.json();\n    const botMessage = { text: data.reply, sender: \"bot\" };\n    setMessages(prev => [...prev, botMessage]);\n    setInput(\"\");\n  };\n\n  return (\n    <div className=\"chat-container\">\n      <h2>Chatbot</h2>\n      <div className=\"chat-box\">\n        {messages.map((msg, i) => (\n          <div key={i} className={`message ${msg.sender}`}>\n            {msg.text}\n          </div>\n        ))}\n      </div>\n      <div className=\"input-area\">\n        <input\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          placeholder=\"Type a message...\"\n        />\n        <button onClick={sendMessage}>Send</button>\n      </div>\n      <div className=\"gcse-search\"></div> {/* Google Custom Search Box */}\n    </div>\n  );\n}\n\nexport default App;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}